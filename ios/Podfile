require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
require_relative '../node_modules/react-native-permissions/scripts/setup'
 
platform :ios, '12.4'
install! 'cocoapods', :deterministic_uuids => false
 
setup_permissions([
  "AppTrackingTransparency",
  "BluetoothPeripheral",
  "Calendars",
  "Camera",
  "Contacts",
  "FaceID",
  "LocationAccuracy",
  "LocationAlways",
  "LocationWhenInUse",
  "MediaLibrary",
  "Microphone",
  "Motion",
  "Notifications",
  "PhotoLibrary",
  "PhotoLibraryAddOnly",
  "Reminders",
  "Siri",
  "SpeechRecognition",
  "StoreKit"
])
 
target 'Kodie' do
  # use_modular_headers!
  use_frameworks! :linkage => :static
  $RNFirebaseAsStaticFramework = true
  config = use_native_modules!
  pod 'Firebase', :modular_headers => true
  pod 'FirebaseCoreInternal', :modular_headers => true
  pod 'GoogleUtilities', :modular_headers => true
  pod 'FirebaseCore', :modular_headers => true
  pod 'FirebaseFirestore', :modular_headers => true
  pod 'FirebaseStorage', :modular_headers => true
  pod 'FBSDKCoreKit',:modular_headers => true
  pod 'FBSDKLoginKit',:modular_headers => true
  # Flags change depending on the env values.
  flags = get_default_flags()
 
  use_react_native!(
    :path => config[:reactNativePath],
    # to enable hermes on iOS, change false to true and then install pods
    :hermes_enabled => flags[:hermes_enabled],
    :fabric_enabled => flags[:fabric_enabled],
    # An absolute path to your application root.
   
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
 
 
  target 'KodieTests' do
    inherit! :complete
    # Pods for testing
  end
 
  # Enables Flipper.
  #
  # Note that if you have use_frameworks! enabled, Flipper will not work and
  # you should disable the next line.
  # use_flipper!()
  # use_flipper!({ 'Flipper' => '0.95.0' })
  # pod 'FlipperKit', '~> 0.90.0', :configuration => 'Debug'
  # post_install do |installer|
  #   react_native_post_install(installer)
  #   __apply_Xcode_12_5_M1_post_install_workaround(installer)
  # end
  post_install do |installer|
    installer.aggregate_targets.first.user_project.native_targets.each do |target|
      target.build_configurations.each do |config|
          config.build_settings['LIBRARY_SEARCH_PATHS'] = ['$(inherited)', '$(SDKROOT)/usr/lib/swift']
      end
    bitcode_strip_path = `xcrun --find bitcode_strip`.chop!
   def strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
     framework_path = File.join(Dir.pwd, framework_relative_path)
     command = "#{bitcode_strip_path} #{framework_path} -r -o #{framework_path}"
     puts "Stripping bitcode: #{command}"
     system(command)
   end

   framework_paths = [
     "Pods/LogRocket/LogRocket.xcframework/ios-arm64/LogRocket.framework/LogRocket",
     "Pods/hermes-engine/destroot/Library/Frameworks/macosx/hermes.framework/hermes",
     "Pods/hermes-engine/destroot/Library/Frameworks/macosx/hermes.framework/Versions/Current/hermes",
     "Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework/ios-arm64/hermes.framework/hermes",
     "Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework/ios-arm64_x86_64-maccatalyst/hermes.framework/hermes"
   ]

   framework_paths.each do |framework_relative_path|
     strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
   end
    installer.pods_project.targets.each do |target|
      if target.name == 'BoringSSL-GRPC'
        target.source_build_phase.files.each do |file|
          if file.settings && file.settings['COMPILER_FLAGS']
            flags = file.settings['COMPILER_FLAGS'].split
            flags.reject! { |flag| flag == '-GCC_WARN_INHIBIT_ALL_WARNINGS' }
            file.settings['COMPILER_FLAGS'] = flags.join(' ')
          end
        end
      end
    end
  end
  
end
  def __apply_Xcode_14_3_RC_post_install_workaround(installer)
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        current_target = config.build_settings['IPHONEOS_DEPLOYMENT_TARGET']
        minimum_target = min_ios_version_supported
        if current_target.to_f < minimum_target.to_f
          config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = minimum_target
        end
      end
    end
  end
 
 
end
